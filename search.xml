<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/09/16/git-ming-ling/"/>
      <url>/2024/09/16/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>记录关于Git的一些命令。</p><h2 id="1-git-命令"><a href="#1-git-命令" class="headerlink" title="1. git 命令"></a>1. git 命令</h2><h3 id="A-git设置"><a href="#A-git设置" class="headerlink" title="A. git设置"></a>A. git设置</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git config user.name        # 查看git设置的全局用户名git config user.email        # 查看git设置的全局邮箱git config --global user.name "witheredwood"  # 设置全局用户名git config --global user.email "123456@163.com"  # 设置全局邮箱<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-提交"><a href="#B-提交" class="headerlink" title="B. 提交"></a>B. 提交</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git add .        # 将当前所有的修改添加到暂存区中git commit -m "修改信息"        # 提交本地暂存区中的内容到本地仓库git push origin main        # 把本地仓库中的修改推到远程仓库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="C-查看不同"><a href="#C-查看不同" class="headerlink" title="C. 查看不同"></a>C. 查看不同</h3><p>在提交信息前可以查看修改的地方，是否与自己想要的一样</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git diff        # 查看尚未缓存的改动，git add 前查看git diff --cached   # 查看已缓存的改动，git add 之后查看git diff --stat    # 查看摘要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="D-查看状态"><a href="#D-查看状态" class="headerlink" title="D. 查看状态"></a>D. 查看状态</h3><p>查看本地文件所处的状态，是未add到暂存区，已add到暂存区还未commit，已commit</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git status        # 查看本地文件状态<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/public/iamages/git-status-1.png" alt="img"></p><p><img src="/public/iamages/git-status-2.png" alt="img"></p><h3 id="E-下载"><a href="#E-下载" class="headerlink" title="E. 下载"></a>E. 下载</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git clone [仓库地址]    # 下载默认分支的仓库代码git clone -b web [仓库地址]     # 下载web分支上的仓库代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="F-分支"><a href="#F-分支" class="headerlink" title="F. 分支"></a>F. 分支</h3><h4 id="1）创建-切换分支"><a href="#1）创建-切换分支" class="headerlink" title="1）创建/切换分支"></a>1）创建/切换分支</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git checkout [分支名]      # 切换分支git checkout -b [新分支名]      # 创建新分支并切换到新分支git checkout -b [新分支名] [origin/分支]        # 基于远程仓库中的分支创建新分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2）查看分支"><a href="#2）查看分支" class="headerlink" title="2）查看分支"></a>2）查看分支</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git branch      # 查看本地所有分支及当前所在分支git branch -r     # 查看远程所有分支git branch -a     # 查看本地和远程所有分支git branch -vv      # 查看本地分支对应的远程分支，没有的不显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/public/iamages/git-branch-vv.png" alt="img"></p><h4 id="3）删除分支"><a href="#3）删除分支" class="headerlink" title="3）删除分支"></a>3）删除分支</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git branch -d [分支名]       # 删除本地分支git push origin --delete [分支名]        # 删除远程分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4）修改分支名"><a href="#4）修改分支名" class="headerlink" title="4）修改分支名"></a>4）修改分支名</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git branch -m [旧分支名] [新分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="G-追踪"><a href="#G-追踪" class="headerlink" title="G. 追踪"></a>G. 追踪</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 创建本地新分支 main 并追踪远程 main 分支git branch --track main origin/main# 本地已有 main 分支，追踪远程 main 分支git branch --set-upstream-to=origin/main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H-合并"><a href="#H-合并" class="headerlink" title="H. 合并"></a>H. 合并</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git rebase        # 把当前分支合并到某分支git rebase main   # 把当前分支合并到main分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="I-历史记录"><a href="#I-历史记录" class="headerlink" title="I. 历史记录"></a>I. 历史记录</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git log git log --oneline    # 输出简要信息git log -n      # 输出最近的n条记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="J-回滚"><a href="#J-回滚" class="headerlink" title="J. 回滚"></a>J. 回滚</h3><h4 id="1）回退到某commit-all"><a href="#1）回退到某commit-all" class="headerlink" title="1）回退到某commit (all)"></a>1）回退到某commit (all)</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git reset --hard [commit id]     # 本地回退到某个记录git push origin main    # 远程回退到相同版本# 使用这种方式回滚git revert HEAD^        # 回退到上一个版本，以前的提交还存在，状态回退git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）一个文件回退到某个-commit"><a href="#2）一个文件回退到某个-commit" class="headerlink" title="2）一个文件回退到某个 commit"></a>2）一个文件回退到某个 commit</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 通过 git log 查找要回退到的版本的id git checkout [commit id]  [文件路径]        # 会影响本地的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3）修改已经push的commit信息"><a href="#3）修改已经push的commit信息" class="headerlink" title="3）修改已经push的commit信息"></a>3）修改已经push的commit信息</h4><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git commit --amend  # 进入 vim 编辑器，修改提交信息git push -f    # 强制提交，这次提交纪录会覆盖上一次提交记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="K-隐藏与恢复"><a href="#K-隐藏与恢复" class="headerlink" title="K. 隐藏与恢复"></a>K. 隐藏与恢复</h3><p>使用场景：当前代码有修改，但是需要修改另外一处问题（1），同时不想当前的修改丢失。可以暂时隐藏当前代码的修改，解决完问题（1）之后，再恢复隐藏的修改。</p><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">git stash        # 隐藏。保存未完成工作而不提交git stash pop           # 恢复之前隐藏的文件git stash list        # 列出多个隐藏处git stash drop        # 删除隐藏列表中最新的一个（也是最上面的一个），等价于git stash drop stash@{0}git stash drop stash@{stashId}    # 删除隐藏列表中的某一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="L-删除远程仓库中的文件夹"><a href="#L-删除远程仓库中的文件夹" class="headerlink" title="L. 删除远程仓库中的文件夹"></a>L. 删除远程仓库中的文件夹</h3><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell">dir     # 查看当前目录下的文件夹git rm -r --cached .idea    # 删除本地缓存区中的.idea文件夹git commit -m "删除.idea文件夹"   # 提交git push origin main    # 推送到远程仓库的main分支<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-出现的问题"><a href="#2-出现的问题" class="headerlink" title="2. 出现的问题"></a>2. 出现的问题</h2><h3 id="A-10054"><a href="#A-10054" class="headerlink" title="A. 10054"></a>A. 10054</h3><blockquote><p>fatal: unable to access ‘<a href="https://github.com/fmtlib/fmt.git/">https://github.com/fmtlib/fmt.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p></blockquote><pre class="line-numbers language-Shell" data-language="Shell"><code class="language-Shell"># 解除ssl验证git config --global http.sslVerify "false"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="B-443"><a href="#B-443" class="headerlink" title="B. 443"></a>B. 443</h3><blockquote><p>Failed to connect to github.com port 443 after 21106 ms: Timed out</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/25/hello-world/"/>
      <url>/2023/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
