<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL数据库浅记</title>
      <link href="/2024/09/17/mysql-shu-ju-ku-qian-ji/"/>
      <url>/2024/09/17/mysql-shu-ju-ku-qian-ji/</url>
      
        <content type="html"><![CDATA[<p>MySQL数据库是一个关系型数据库管理系统。</p><h2 id="1-数据库和实例"><a href="#1-数据库和实例" class="headerlink" title="1. 数据库和实例"></a>1. 数据库和实例</h2><p><strong>数据库是文件的集合</strong>，是依照某种数据模型组织起来并存放在二级存储器中的数据集合。</p><p><strong>数据库实例是程序</strong>，是位于用户和操作系统之间的一层数据管理软件。用户对数据库的任何操作，都是在数据库实例下进行的。</p><p>任何对数据库的操作，都需要<strong>通过数据库实例来完成对数据库的操作</strong>。</p><h2 id="2-MySQL数据库"><a href="#2-MySQL数据库" class="headerlink" title="2. MySQL数据库"></a>2. MySQL数据库</h2><p><img src="/images/mysql%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png"></p><p><code>MySQL</code>数据库区别于其他数据库的最重要的一个特点就是<strong>插件式的表存储引擎</strong>。</p><p><strong>存储引擎是基于表的，而不是数据库</strong>。<code>MySQL</code>架构的存储引擎架构提供了一系列标准的管理和服务支持，这些标准和存储引擎无关。存储引擎是底层物理结构的实现，每个存储引擎开发者可按照自己的意愿来进行开发。</p><p>由于<code>MySQL</code>数据库是开源的，所以存储引擎有分为<code>MySQL</code>官方引擎和第三方存储引擎有。些第三方存储引擎，如<code>InnoDB</code>存储引擎（后被<code>Oracle</code>收购），应用广泛。</p><h2 id="3-存储引擎介绍"><a href="#3-存储引擎介绍" class="headerlink" title="3.存储引擎介绍"></a>3.存储引擎介绍</h2><h3 id="A-InnoDB"><a href="#A-InnoDB" class="headerlink" title="A. InnoDB"></a>A. InnoDB</h3><p><code>InnoDB</code>存储引擎的设计目标主要是面向<strong>在线事务处理OLTP</strong>的应用，它支持事务，特点是行锁设计、支持外键，并支持类似于<code>Oracle</code>的非锁定读（读操作默认是不加锁）。从<code>MySQL5.5.8</code>开始，<code>MySQL</code>存储引擎默认是<code>InnoDB</code>。<code>InnoDB</code>具有高可用性、高性能以及高可扩展性。</p><p><code>InnoDB</code>（1）通过<strong>多版本并发控制</strong><strong><code>MVCC</code><strong>来获得高并发性，并且实现了<code>SQL</code>标准的</strong>4种隔离级别</strong>，默认是<code>REPEATABLE READ</code>可重复读级别。（2）同时使用一种**<code>next-key-locking</code>*<em><strong>的策略</strong>来避免幻读的产生。（3）还提供了插入缓冲、二次写、自适应哈希索引、预读等高</em>*性能和高可用的功能**。</p><p>对于表中数据的存储，<code>InnoDB</code>采用了<strong>聚集</strong>的方式，因此每张表的存储时按照主键的顺序进行存放。如果表中没有自定义主键，<code>InnoDB</code>会为每一行生成一个6字节的<code>ROWID</code>，作为主键。</p><p><img src="/images/innodb.png"></p><h3 id="B-MyISAM"><a href="#B-MyISAM" class="headerlink" title="B. MyISAM"></a>B. MyISAM</h3><p><code>MyISAM</code>主要面向一些<strong>联机分析处理OLAP</strong>的应用，它支持<strong>全文索引</strong>，不支持事物、表锁设计。</p><p><code>MyISAM</code>不同的一点是<strong>缓冲池只缓存索引文件，而不缓存数据文件</strong>。数据文件的缓存交由操作系统完成。</p><h2 id="4-连接数据库"><a href="#4-连接数据库" class="headerlink" title="4. 连接数据库"></a>4. 连接数据库</h2><p>连接数据库，是<strong>一个进程和数据库实例进行通信。</strong>从程序设计的角度来说，本质上是<strong>进程通信</strong>。</p><p>所以，通信的方式有管道、命名管道、命名字、<code>TCP/IP</code>套接字、<code>UNIX</code>域套接字。</p><ul><li><strong>不在同一台服务器上</strong>：<code>TCP/IP</code>套接字</li><li><strong>在同一台服务器</strong>上：<code>UNIX</code>域套接字、命名管道、共享内存</li></ul><h2 id="5-InnoDB-存储引擎"><a href="#5-InnoDB-存储引擎" class="headerlink" title="5. InnoDB 存储引擎"></a>5. InnoDB 存储引擎</h2><h3 id="A-后台线程"><a href="#A-后台线程" class="headerlink" title="A. 后台线程"></a>A. 后台线程</h3><p><code>InnoDB</code>是一个多线程的模型，不同的线程负责不同的任务。</p><ul><li>核心线程：负责缓冲池中的数据异步刷新到磁盘，保证数据的一致性，包括脏页的刷新、合插入缓冲、<code>UNDO</code>页的回收等。</li><li><code>IO</code>线程：负责<code>IO</code>请求的回调。大量使用了异步<code>IO</code>来处理<code>IO</code>请求，从而提高性能。</li><li>清空<code>purge</code>线程：负责回收已经使用并分配的<code>undo</code>页。在事务提交之后，其所使用的<code>undolog</code>不再需要，就需要回收<code>undo</code>页。</li><li>脏页刷新线程：负责脏页的刷新操作。目的是减轻核心线程的工作和用户查询线程的阻塞。</li></ul><h3 id="B-内存"><a href="#B-内存" class="headerlink" title="B. 内存"></a>B. 内存</h3><h4 id="1）缓冲池"><a href="#1）缓冲池" class="headerlink" title="1）缓冲池"></a>1）缓冲池</h4><p><code>InnoDB</code>是基于<strong>磁盘存储</strong>的，并将其中的记录按照<strong>页</strong>的方式进行管理。</p><p>在数据库系统中，由于<code>CPU</code>速度和磁盘的速度差别很大，所以常使用缓冲池技术来提高数据库的整体性能。</p><p>缓冲池是一块内存区域，默认是<code>16KB</code>，通过内存的速度来弥补磁盘速度较慢对数据的影响。</p><h5 id="🎨-读页操作"><a href="#🎨-读页操作" class="headerlink" title="🎨 读页操作"></a>🎨 <strong>读页</strong>操作</h5><p>从磁盘读取的页存放在缓冲池中，下次再读相同的页时，首先判断该页是否在缓冲池中。若在，则读取该页，返回结果。若不在，读取磁盘上的页，返回结果。</p><p>暂时无法在飞书文档外展示此内容</p><h5 id="🖌-写页操作"><a href="#🖌-写页操作" class="headerlink" title="🖌 写页操作"></a>🖌 写<strong>页</strong>操作</h5><p>先修改缓冲池中的页，以一定的频率刷新到磁盘中。</p><p>是通过<code>checkpoint</code>机制刷新会磁盘，而不是在每次页发生修改时。</p><h5 id="👜-缓冲的数据类型"><a href="#👜-缓冲的数据类型" class="headerlink" title="👜 缓冲的数据类型"></a><strong>👜 缓冲的数据类型</strong></h5><p><strong>缓冲池缓冲的数据页类型</strong>有：索引页、数据页、<code>undo</code>页、插入缓冲、自适应哈希索引、锁信息、数据字典信息等。</p><p>暂时无法在飞书文档外展示此内容</p><h5 id="🍵-管理页"><a href="#🍵-管理页" class="headerlink" title="🍵 管理页"></a>🍵 管理页</h5><p><code>LRU</code>最近最少使用算法，释放最少使用的页。</p><p><code>InnoDB</code>对<code>LRU</code>算法做了优化，在<code>LRU</code>列表中加入<code>midpoint</code>位置，新读取到的页，放在<code>midpoint</code>位置，而不是列表的首部。默认<code>midpoint</code>在列表长度的 <code>5/8</code> 处。<code>new</code> 列表中的页是最为活跃的热点数据。</p><p>暂时无法在飞书文档外展示此内容</p><h5 id="🌺-脏页"><a href="#🌺-脏页" class="headerlink" title="🌺 脏页"></a>🌺 脏页</h5><p><code>LRU</code>列表中的页被修改后，成为脏页（缓冲池和磁盘上的数据不一致）。数据库会通过<code>checkpoint</code>机制将脏页刷新回磁盘。</p><p>脏页即存在于<code>LRU</code>列表，也存在于<code>Flush</code>列表中。<code>Flush</code>列表中的页是脏页列表。</p><p><code>LRU</code>列表管理缓冲池中页的可用性，<code>Flush</code>列表管理将页刷新回磁盘，两者互不影响。</p><h4 id="2）重做日志缓冲"><a href="#2）重做日志缓冲" class="headerlink" title="2）重做日志缓冲"></a>2）重做日志缓冲</h4><p>重做日志缓冲 <code>redo log buffer</code>。</p><p><code>InnoDB</code>会先将重做日志信息放入到这个缓冲区，然后按一定的频率将其刷新到重做日志文件（磁盘中）。</p><p>重做日志缓冲一般不需要很大，默认是<code>8MB</code>，因为一般每1秒钟会将重做日志刷新到日志文件。</p><p>什么情况下刷新：</p><ul><li><strong>核心线程</strong><code>Master Thread</code>每1秒钟刷新</li><li>每个事务<strong>提交</strong>时</li><li>重做日志缓冲池<strong>剩余空间</strong>小于 <code>1/2</code> 时</li></ul><p>暂时无法在飞书文档外展示此内容</p><h4 id="3）额外的缓冲池"><a href="#3）额外的缓冲池" class="headerlink" title="3）额外的缓冲池"></a>3）额外的缓冲池</h4><p>在给对象分配内存时，是从内存中的堆中分配，如果堆的空间不够，会从缓冲池进行申请。</p><h3 id="C-Checkpoint-技术"><a href="#C-Checkpoint-技术" class="headerlink" title="C. Checkpoint 技术"></a>C. Checkpoint 技术</h3><p>为了避免数据丢失的问题，当前事务数据库系统普遍采用了<code>Write Ahead Log</code>策略，也就是<strong>当事务提交时，先写重做日志，再修改页</strong>。这样由于宕机而导致数据丢失时，通过重做日志可以完成数据的恢复。这也是<code>ACID</code>中<code>D</code>（持久性）的要求。</p><h4 id="1）解决的问题"><a href="#1）解决的问题" class="headerlink" title="1）解决的问题"></a>1）解决的问题</h4><p><code>Checkpoint</code>检查点技术是解决以下几个问题：</p><ul><li>缩短数据库的<strong>恢复时间</strong></li></ul><p>当数据库发生宕机时，不需要从头重做所有日志，因为<code>Checkpoint</code>之前的页都已经刷新回磁盘，所以数据库只需对<code>Checkpoint</code>后的重做日志进行恢复。</p><ul><li><strong>缓冲池不够用</strong>时，将脏页刷新到磁盘</li></ul><p>缓冲池不够用时，根据<code>LRU</code>算法会移出最近最少使用的页，如果这页是脏页的话，需要强制执行<code>Checkpoint</code>，将脏页刷新回磁盘。</p><ul><li><strong>重做日志不可用</strong>时，刷新日志</li></ul><p>重做日志不可用是因为当前事务数据库系统对重做日志的设计是循环使用的。</p><p>当数据库发生宕机时，如果不需要这部分的重做日志，那么这部分就可以被覆盖。如果需要这部分的日志，就必须强制产生<code>Checkpoint</code>，将缓冲池的页至少刷新到当前重做日志的位置。</p><h4 id="2）类型"><a href="#2）类型" class="headerlink" title="2）类型"></a>2）类型</h4><p><code>Checkpoint</code>所做的事情就是将缓冲池的页刷新到磁盘中，不同的是刷新多少页磁盘，每次从哪里刷新，什么时间触发<code>Checkpoint</code>。</p><h5 id="🍚-Sharp-Checkpoint"><a href="#🍚-Sharp-Checkpoint" class="headerlink" title="🍚 Sharp Checkpoint"></a>🍚 Sharp Checkpoint</h5><p>发生在数据库关闭时。</p><h5 id="🍚-Fuzzy-Checkpoint"><a href="#🍚-Fuzzy-Checkpoint" class="headerlink" title="🍚 Fuzzy Checkpoint"></a>🍚 Fuzzy Checkpoint</h5><p>刷新一部分脏页到磁盘，而不是全部的脏页。</p><h3 id="D-插入缓冲-insert-buffer"><a href="#D-插入缓冲-insert-buffer" class="headerlink" title="D. 插入缓冲 insert buffer"></a>D. 插入缓冲 insert buffer</h3><p>在插入时还是按照主键进行顺序存放，但是对于非聚集索引叶子节点的插入不是顺序的。</p><p>对于非聚集索引和插入或更新操作，不是每一次直接插入到索引页中，而是先判断插入的非聚集索引页是否在缓冲池中。如果在，直接插入；如果不在，先放入到一个<code>Insert  Buffer</code>对象中，实际上并没有插入。以一定的频率和情况合并<code>Insert Buffer</code>和辅助索引页子节点，通常能将多个插入合并到一个操作中（因为在一个索引页中）。</p><p>暂时无法在飞书文档外展示此内容</p><h4 id="1）使用条件"><a href="#1）使用条件" class="headerlink" title="1）使用条件"></a>1）使用条件</h4><ul><li>索引是辅助索引</li><li>索引不是唯一的</li></ul><p>辅助索引不能是唯一的，是因为在插入缓冲时，数据库不会查询索引页来判断插入记录的唯一性。</p><h4 id="2）内部实现"><a href="#2）内部实现" class="headerlink" title="2）内部实现"></a>2）内部实现</h4><p>暂时无法在飞书文档外展示此内容</p><h4 id="3）Change-Buffer"><a href="#3）Change-Buffer" class="headerlink" title="3）Change Buffer"></a>3）Change Buffer</h4><p>对插入、删除、更新操作都进行缓冲，分别是<code>Insert Buffer</code>、<code>Delete Buffer</code>、<code>Update Buffer</code>。</p><p>非唯一的辅助索引</p><h3 id="E-两次写"><a href="#E-两次写" class="headerlink" title="E. 两次写"></a>E. 两次写</h3><p>当写入失效发生时，先<strong>通过页的副本来还原该页</strong>，再进行<strong>重做</strong>。</p><p>当数据库宕机时，可能正在写入一个页，而这个页只写了一部分，比如<code>16K</code>的页面只写了<code>4K</code>，然后发生了宕机。这种情况称为部分写失效。如果没有两次写，会因为部分写失效而导致数据失效。</p><p>重做日志中的记录的是对页的物理操作，如果页已经损坏，那么再进行重做是没有意义的。</p><h3 id="F-慢查询日志"><a href="#F-慢查询日志" class="headerlink" title="F. 慢查询日志"></a>F. 慢查询日志</h3><p>通过慢查询日志可以<strong>定位可能存在问题的SQL语句，</strong>从而进行<code>SQL</code>语句层面的优化。</p><p>比如，在<code>MySQL</code>启动时设置一个阈值，将运行时间超过<code>（&gt;）</code>阈值的<code>SQL</code>语句都记录在慢查询日志中。每隔一段时间查看日志，确认是否有SQL语句需要优化。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"># 查看进入慢查询日志的SQL语句的执行时间show variables like 'long_query_time'# 查看变量，没有使用索引的SQL语句show variables like 'log_queries_not_using_indexes'# 开启慢查询日志set global slow_query_log='ON'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/%E6%85%A2%E6%9F%A5%E8%AF%A2.png"></p><h4 id="1）slow-log表"><a href="#1）slow-log表" class="headerlink" title="1）slow_log表"></a>1）slow_log表</h4><p><code>MySQL</code>的<code>slow log</code>通过运行时间来对<code>SQL</code>语句进行捕获，这是一个非常有用的优化技巧。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"># 查看慢查询表select * from mysql.slow_log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/slow-log-result.png"></p><h4 id="2）-其他日志"><a href="#2）-其他日志" class="headerlink" title="2） 其他日志"></a>2） 其他日志</h4><ul><li>查询日志：记录了所有对<code>MySQL</code>数据库<strong>请求</strong>的信息。默认文件名：<code>主机名.log</code>。对于未正确执行的<code>SQL</code>语句，也会记录。</li><li>二进制日志：记录了对<code>MySQL</code>数据库（包括不同的存储引擎）执行<strong>更改</strong>的所有操作，但是不包括<code>select</code>和<code>show</code>操作。</li></ul><p>因为这类操作对数据本身并没有修改。然而，有些操作没有导致数据库发生变化，也可能会写入二进制文件。作用有：</p><ul><li>恢复（恢复某些数据需要二进制文件 ）；</li><li>复制（通过复制和执行二进制日志使一台远程的<code>MySQL</code>数据库与一台<code>MySQL</code>数据库进行实时同步）；</li><li>审计（通过二进制日志中的信息来进行审计，判断是否有对数据库进行主任的攻击）。</li></ul><h3 id="G-索引"><a href="#G-索引" class="headerlink" title="G. 索引"></a>G. 索引</h3><p><code>InnoDB</code>存储引擎支持<strong>B+树、全文索引、哈希索引</strong>。</p><h4 id="1）哈希索引"><a href="#1）哈希索引" class="headerlink" title="1）哈希索引"></a>1）哈希索引</h4><p><code>InnoDB</code>会根据表的使用情况自动为表生成哈希索引，不能人为干预是否在一张表生成哈希索引。</p><h4 id="2）B-树索引"><a href="#2）B-树索引" class="headerlink" title="2）B+树索引"></a>2）B+树索引</h4><p><code>B+</code>树中<code>B</code>代表平衡。</p><p><code>B+</code>树索引不能找到一个给定键值的具体行。<code>B+</code>树能找到的是数据行所在的页，然后数据库把页读入到内存中，在内存中查找，得到要查找的数据。</p><p><code>B+</code>树是一种<strong>平衡查找树</strong>。所有记录节点都是按键值的大小顺序放在同一层的叶子节点上，由各叶子节点指针进行连接。比如，一棵高度为2的<code>B+</code>树如下：</p><p>暂时无法在飞书文档外展示此内容</p><p><code>B+</code>树索引在数据库中有一个特点是<strong>高扇出性</strong>。因此在数据库中，<code>B+</code>树的高度一般都在<strong>2~4</strong>层。也就是说查找某一个键值的行记录是最多需要<strong>2~4</strong>次<code>IO</code>。</p><h4 id="3）聚集索引"><a href="#3）聚集索引" class="headerlink" title="3）聚集索引"></a>3）聚集索引</h4><p>按照每张表的主键构造一棵<code>B+</code>树，同时叶子节点中存放的是每张表的行记录数据。也将聚集索引的叶子节点称为<strong>数据页</strong>。</p><p>数据页只能按照一棵<code>B+</code>树进行排序，因此每张表只能有一个聚集索引。在多数情况下，查询优化器会倾向于采用聚集索引，因为聚集索引能够在<code>B+</code>树索引的叶子节点上查找到数据。</p><p>由于定义了 逻辑顺序，聚集索引能够很快地访问针对<strong>范围值</strong>的查询。</p><p>数据页存放的是<strong>完整的每行的记录</strong>，非数据页的索引页中，存放的是<strong>键值及指向数据页的偏移量</strong>。</p><p>好处：对于主键的排序查找和范围查找速度很快。</p><h4 id="4）辅助索引"><a href="#4）辅助索引" class="headerlink" title="4）辅助索引"></a>4）辅助索引</h4><p>辅助索引（非聚集索引），并不影响数据在聚集索引中的组织，因此每张表可以有多个辅助索引。</p><p>查找：<code>InnoDB</code>会<strong>遍历</strong>辅助索引并通过叶级别的指针获得指向主键索引的<strong>主键</strong>，然后再通过主键索引来找到一个完整的<strong>行记录</strong>。</p><p> 创建辅助索引时，<code>InnoDB</code>会对创建索引的表上加一个<code>S锁</code>，在创建表的过程中，不需要重建表，所以速度会提高很多。</p><h4 id="5）联合索引"><a href="#5）联合索引" class="headerlink" title="5）联合索引"></a>5）联合索引</h4><p>对表上的多个列进行索引。联合索引也是一棵<code>B+</code>树。联合索引，先对第一列排序，然后再对第二列排序，依次下去。</p><p>暂时无法在飞书文档外展示此内容</p><h4 id="6）覆盖索引"><a href="#6）覆盖索引" class="headerlink" title="6）覆盖索引"></a>6）覆盖索引</h4><p>覆盖索引：从辅助索引中就可以得到查询的记录，而不需要查询聚集索引中的记录。</p><p>好处：辅助索引不包含整行记录的所有信息，所有辅助索引的大小要远小于聚集索引，可以减少大量的<code>IO</code>操作。</p><p>对于统计问题而言，<code>InnoDB</code>存储引擎不会选择查询聚集索引来进行统计，而是会选择辅助索引。</p><p>此外，对于<code>(a, b)</code>的联合索引，一般是不可以选择列b作为查询条件的，但如果是统计操作，比如，<code>count(*)</code>，并且是覆盖索引的，优化器会选择联合索引。</p><p>对于不能进行索引覆盖的情况，优化器选择辅助索引的情况是，通过辅助索引查找的数据是少量的。</p><p>如果访问的数据量较大（占全表的<code>20%</code>），优化器会通过聚集索引来查找数据。</p><h4 id="7）优化器不使用索引的情况"><a href="#7）优化器不使用索引的情况" class="headerlink" title="7）优化器不使用索引的情况"></a>7）优化器不使用索引的情况</h4><p>优化器没有选择索引去查找数据，而是通过扫描聚集索引，也就是直接进行全表的扫描来得到数据。这种情况大多发生在<strong>范围查找、JOIN连接</strong>等情况下。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from orderdetailswhere orderid &gt; 10000 and orderid &lt; 10200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8）哈希索引"><a href="#8）哈希索引" class="headerlink" title="8）哈希索引"></a>8）哈希索引</h4><p>哈希索引只能搜索<strong>等值的查询</strong>，不能进行范围查找和顺序查找。</p><h4 id="9）全文检索"><a href="#9）全文检索" class="headerlink" title="9）全文检索"></a>9）全文检索</h4><p>全文检索，是将存储于数据库中的整本书或者整篇文章中的任意内容信息查找出来。可以根据需要获得全文中有关章、节、段、句、词等信息，也可以进行各种统计和分析。</p><p>全文检索通常使用倒排索引来实现。倒排索引也是一种索引结构。在辅助表中存储了单词与单词在一个会多个文档中是在位置之间的映射。通常利用关联数组实现。有两种表现形式：</p><ul><li>一种是｛单词，单词所在文档的<code>ID</code>｝</li><li>一种是｛单词，（单词所在文档的<code>ID</code>，在具体文档中的位置｝</li></ul><h2 id="6-锁"><a href="#6-锁" class="headerlink" title="6. 锁"></a>6. 锁</h2><p><code>InnoDB</code>不需要锁升级，因为<strong>一个锁和多个锁的开销是相同的</strong>。</p><p>锁机制用于管理<strong>共享资源的并发访问</strong>，提供数据的完整性和一致性。锁是数据库系统区别于文件系统的一个关键特性。</p><p><code>InnoDB</code>会在数据库的多个地方使用锁，从而允许对多种不同资源提供并发访问，比如，操作缓冲池中的<code>LRU</code>列表、删除、添加、移动<code>LRU</code>列表中的元素。</p><p><code>InnoDB</code>提供一致性的非锁定读、行级锁支持。行级锁没有额外的开销，并可以同时得到并发性和一致性。</p><h3 id="A-Lock"><a href="#A-Lock" class="headerlink" title="A. Lock"></a>A. Lock</h3><p>数据库中<code>lock</code>和<code>latch</code>都是锁。<code>latch</code>一般称为闩锁（轻量级锁）。它要求锁定的时间必须非常短，时间长性能会变差。<code>InnoDB</code>中<code>latch</code>分为<code>mutex</code>（互斥量）和<code>rwlock</code>（读写锁），其目的用来保证<strong>并发线程操作临界资源</strong>的正确性，通常没有死锁检测的机制。</p><p><code>lock</code>的对象是事务，用来<strong>锁定数据库中的对象</strong>，比如表、页、行。<code>lock</code>的对象在事务<code>commit</code>或<code>rollback</code>后释放。此外，<code>lock</code>是有死锁机制（<code>waits-for graph</code>、<code>time out</code>等机制）的。</p><h3 id="B-行级锁的类型"><a href="#B-行级锁的类型" class="headerlink" title="B. 行级锁的类型"></a>B. 行级锁的类型</h3><ul><li>共享锁 <code>S Lock</code>：允许事务读一行数据。</li><li>排它锁 <code>X Lock</code>：允许事务删除或更新一行数据。</li></ul><p>对同一行数据数据是否冲突：</p><p>S 锁X 锁S 锁不冲突冲突X 锁冲突冲突</p><h3 id="C-表级锁的类型"><a href="#C-表级锁的类型" class="headerlink" title="C. 表级锁的类型"></a>C. 表级锁的类型</h3><h4 id="1）意向锁"><a href="#1）意向锁" class="headerlink" title="1）意向锁"></a>1）意向锁</h4><p>意向锁：意向锁将锁定的对象分为多个层次，事务希望在在更细粒度上加锁。<code>InnoDB</code>对意向锁的实现时表级别的锁。目的是在一个事务中揭示下一行将被请求的锁类型。</p><h4 id="2）类型-1"><a href="#2）类型-1" class="headerlink" title="2）类型"></a>2）类型</h4><ul><li>意向共享锁 <code>IS Lock</code>：事务想获得一张表中某几行的共享锁。</li><li>意向排它锁 <code>IX Lock</code>：事务想获得一张表中某几行的排它锁。</li></ul><p><code>InnoDB</code>支持的是行级别的锁，所以意向锁不会阻塞全表扫描以外的任何请求。</p><p>意向锁之间是互相兼容的</p><p>IS 锁IX 锁IS 锁兼容兼容IX 锁兼容兼容</p><p>意向锁和行级锁共享锁和排它锁的关系如下：</p><p>S 锁X 锁IS 锁兼容互斥IX 锁互斥互斥</p><h3 id="D-一致性非锁定读"><a href="#D-一致性非锁定读" class="headerlink" title="D. 一致性非锁定读"></a>D. 一致性非锁定读</h3><p>一致性的非锁定读：<code>InnoDB</code>通过行多版本控制的方式来读取当前执行时间数据库中行的数据。如果读取的行正在执行<code>DELETE</code>或<code>UPDATE</code>操作，这时<strong>读操作不会去等待行上锁的释放</strong>。相反的，<code>InnoDB</code>会去读取行的一个快照数据。</p><p>非锁定读机制大大提高了数据库的并发性，是<code>InnoDB</code>的默认读取方式，读取不会占用和等待表上的锁。 </p><p>快照数据是当前行之前的历史版本，每行记录可能有多个版本。<strong>一个行可能有多个快照数据</strong>，这种技术是<strong>行多版本技术</strong>。由此带来的并发控制，称为<strong>多版本并发控制MVCC</strong>。通过<code>MVCC</code>可以获得高并发性。</p><p>在事物隔离级别 <code>READ COMMITED</code>和<code>REPEATABLE READ</code>下，<code>InnoDB</code>使用的是非锁定的一致性读。</p><p>然而它们对于读取的快照数据并不一样。</p><ul><li><code>READ COMMITED</code>隔离级别下，读取的是被锁定的行的最新一份快照数据，</li><li><code>REPEATABLE READ</code>隔离级别下，读取的是事务开始时的行数据版本。</li></ul><h3 id="E-一致性锁定读"><a href="#E-一致性锁定读" class="headerlink" title="E. 一致性锁定读"></a>E. 一致性锁定读</h3><p>默认配置下（也就是隔离级别<code>REPEATABLE READ</code>），<code>InnoDB</code>的<code>SELECT</code>操作使用的一致性非锁定读，但是在某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性。</p><pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL"># 加共享锁SELECT ... LOCK IN SHARE MODE;# 加排他锁SELECT ... FOR UPDATE;# 在使用上面两个语句时，必须加上 BEGIN, START TRANSACTION或者AUTOCOMMIT=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的某些情况：</p><p>对于外键的插入后更新，首先需要查询父表中的记录，也就是<code>SELECT</code>父表。对于父表的<code>SELECT</code>操作，不是使用一致性非锁定读（会发生数据不一致的问题），使用的是<code>SELECT ··· LOCK IN SHARE MODE</code>，主动对父表加一个<code>S</code>锁。</p><h3 id="F-行锁的3种算法"><a href="#F-行锁的3种算法" class="headerlink" title="F. 行锁的3种算法"></a>F. 行锁的3种算法</h3><ul><li><code>Record Lock</code>：单个行记录上的锁。</li><li><code>Gap Lock</code>：间隙锁，锁定一个范围，不包含记录本身。</li><li><code>Next-Key Lock</code>： <code>Gap Lock</code> + <code>Record Lock</code>，锁定一个范围，包含记录本身。</li></ul><h3 id="G-解决幻像问题"><a href="#G-解决幻像问题" class="headerlink" title="G. 解决幻像问题"></a>G. 解决幻像问题</h3><p>默认的事务隔离级别下，<code>InnoDB</code>会出现幻读的问题，通过<code>Next-Key Lock</code>机制来避免。</p><p>比如，<code>SELECT * FROM t WHERE a &gt; 2 FOR UPDATE</code>，锁住的是$$(2, \infty) $$，而不是大于2的单个值。锁住的期间是不允许插入的。</p><p><code>InnoDB</code>默认的隔离级别是<code>REPEATABLE READ</code>，该级别下，采用<code>Next-Key Lock</code>的方式来加锁。</p><p>隔离级别是<code>READ COMMITED</code>，该级别下，采用<code>Record Lock</code>的方式来加锁。</p><h3 id="H-锁升级"><a href="#H-锁升级" class="headerlink" title="H. 锁升级"></a>H. 锁升级</h3><p>将当前锁的粒度降低。比如，将1000个行锁升级为页锁或者将页锁升级为表锁。</p><p><code>InnoDB</code>不存在锁升级的问题，它是<strong>根据每个事务访问的页对锁进行管理</strong>，采用的是<strong>位图</strong>的方式。</p><p>因此，不管一个事务锁住页中有一个记录还是多个记录，它的开销是一样的。它不是根据每个记录来产生行锁的。</p><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7. 事务"></a>7. 事务</h2><ul><li>隔离性通过锁机制完成；</li><li>原子性、一致性、隔离性通过<code>redo log</code>、<code>undo log</code>完成；</li></ul><p>通过<code>redo log</code>实现持久性；通过<code>undo log</code>实现原子性；通过锁机制以及<code>MVCC</code>实现隔离性；</p><p>一致性得到保证。</p><p>暂时无法在飞书文档外展示此内容</p><h3 id="A-重做日志-redo"><a href="#A-重做日志-redo" class="headerlink" title="A. 重做日志 redo"></a>A. 重做日志 redo</h3><p><strong>重做日志用来实现事务的持久性</strong>，包含两部分：一是内存中的重做日志缓冲（易失的），二是重做日志文件（持久的）。</p><p>当事务提交<code>COMMIT</code>时，必须先将事务的所有日志写入到重做日志文件进行持久化。</p><p>重做日志是<strong>顺序写</strong>的，在数据库运行时不需要对重做日志进行读取操作。重做日志在事务进行过程中不断地写入，并不是随事务提交的顺序进行写入。</p><h3 id="B-回滚日志-undo"><a href="#B-回滚日志-undo" class="headerlink" title="B. 回滚日志 undo"></a>B. 回滚日志 undo</h3><p>回滚日志用来帮助事务回滚及<code>MVCC</code>功能。回滚日志是需要<strong>随机读写</strong>的。</p><p>在事务对数据库进行修改时，<code>InnoDB</code>不但会产生<code>redo log</code>，还会产生一定量的<code>undo log</code>。</p><p><code>undo</code>存在在数据库内部一个特殊段中，这个段是<code>undo</code>段。<code>undo</code>段位于<strong>共享表空间</strong>内。</p><p>undo是<strong>逻辑日志</strong>，只是在逻辑上将数据库恢复到原来的样子，所有修改被逻辑的取消了。但是数据结构和页本身在回滚之后可能大不相同。</p><p><code>undo log</code>也会产生<code>redo log</code>。</p><p>其他事务可能需要通过<code>undo log</code>来得到行记录之前的版本。是否最终可以删除<code>undo log</code>及<code>undo log</code>所在的页有<code>purge</code>线程来判断。</p><h3 id="C-Purge"><a href="#C-Purge" class="headerlink" title="C. Purge"></a>C. Purge</h3><p>由<code>purge</code>线程最终完成<code>delete</code>和<code>update</code>操作，以及清理<code>undo log</code>。是因为<code>InnoDB</code>支持<code>MVCC</code>，所以记录不能在事务提交时立即进行处理。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令使用</title>
      <link href="/2024/09/16/git-ming-ling/"/>
      <url>/2024/09/16/git-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>记录关于Git的一些命令。</p><h2 id="1-git-命令"><a href="#1-git-命令" class="headerlink" title="1. git 命令"></a>1. git 命令</h2><h3 id="A-git设置"><a href="#A-git设置" class="headerlink" title="A. git设置"></a>A. git设置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config user.name        <span class="token comment"># 查看git设置的全局用户名</span><span class="token function">git</span> config user.email        <span class="token comment"># 查看git设置的全局邮箱</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"witheredwood"</span>  <span class="token comment"># 设置全局用户名</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"123456@163.com"</span>  <span class="token comment"># 设置全局邮箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="B-提交"><a href="#B-提交" class="headerlink" title="B. 提交"></a>B. 提交</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>        <span class="token comment"># 将当前所有的修改添加到暂存区中</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"修改信息"</span>        <span class="token comment"># 提交本地暂存区中的内容到本地仓库</span><span class="token function">git</span> push origin main        <span class="token comment"># 把本地仓库中的修改推到远程仓库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果需要撤销已add的单文件或单文件夹，执行下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：执行完 <code>git add .</code> 之后，发现文件夹 <code>.vscode</code> 不需要提交，所以需要把 <code>.vscode</code> 文件夹从本地暂存区中移出。查询当前文件状态，如下：</p><p><img src="/images/git-status-before.png"></p><p>执行完 <code>git reset .vscode</code> 后的状态，如下：</p><p><img src="/images/git-status-after.png"></p><h3 id="C-查看不同"><a href="#C-查看不同" class="headerlink" title="C. 查看不同"></a>C. 查看不同</h3><p>在提交信息前可以查看修改的地方，是否与自己想要的一样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">diff</span>        <span class="token comment"># 查看尚未缓存的改动，git add 前查看</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--cached</span>   <span class="token comment"># 查看已缓存的改动，git add 之后查看</span><span class="token function">git</span> <span class="token function">diff</span> <span class="token parameter variable">--stat</span>    <span class="token comment"># 查看摘要</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="D-查看状态"><a href="#D-查看状态" class="headerlink" title="D. 查看状态"></a>D. 查看状态</h3><p>查看本地文件所处的状态，是未add到暂存区，已add到暂存区还未commit，已commit</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status        <span class="token comment"># 查看本地文件状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/git-status-1.png"></p><p><img src="/images/git-status-2.png"></p><h3 id="E-下载"><a href="#E-下载" class="headerlink" title="E. 下载"></a>E. 下载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token punctuation">[</span>仓库地址<span class="token punctuation">]</span>    <span class="token comment"># 下载默认分支的仓库代码</span><span class="token function">git</span> clone <span class="token parameter variable">-b</span> web <span class="token punctuation">[</span>仓库地址<span class="token punctuation">]</span>     <span class="token comment"># 下载web分支上的仓库代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="F-分支"><a href="#F-分支" class="headerlink" title="F. 分支"></a>F. 分支</h3><h4 id="1）创建-切换分支"><a href="#1）创建-切换分支" class="headerlink" title="1）创建/切换分支"></a>1）创建/切换分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span>      <span class="token comment"># 切换分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>新分支名<span class="token punctuation">]</span>      <span class="token comment"># 创建新分支并切换到新分支</span><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> <span class="token punctuation">[</span>新分支名<span class="token punctuation">]</span> <span class="token punctuation">[</span>origin/分支<span class="token punctuation">]</span>        <span class="token comment"># 基于远程仓库中的分支创建新分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2）查看分支"><a href="#2）查看分支" class="headerlink" title="2）查看分支"></a>2）查看分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch      <span class="token comment"># 查看本地所有分支及当前所在分支</span><span class="token function">git</span> branch <span class="token parameter variable">-r</span>     <span class="token comment"># 查看远程所有分支</span><span class="token function">git</span> branch <span class="token parameter variable">-a</span>     <span class="token comment"># 查看本地和远程所有分支</span><span class="token function">git</span> branch <span class="token parameter variable">-vv</span>      <span class="token comment"># 查看本地分支对应的远程分支，没有的不显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/git-branch-vv.png"></p><h4 id="3）删除分支"><a href="#3）删除分支" class="headerlink" title="3）删除分支"></a>3）删除分支</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span>       <span class="token comment"># 删除本地分支</span><span class="token function">git</span> push origin <span class="token parameter variable">--delete</span> <span class="token punctuation">[</span>分支名<span class="token punctuation">]</span>        <span class="token comment"># 删除远程分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4）修改分支名"><a href="#4）修改分支名" class="headerlink" title="4）修改分支名"></a>4）修改分支名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> branch <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>旧分支名<span class="token punctuation">]</span> <span class="token punctuation">[</span>新分支名<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="G-追踪"><a href="#G-追踪" class="headerlink" title="G. 追踪"></a>G. 追踪</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建本地新分支 main 并追踪远程 main 分支</span><span class="token function">git</span> branch <span class="token parameter variable">--track</span> main origin/main<span class="token comment"># 本地已有 main 分支，追踪远程 main 分支</span><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="H-合并"><a href="#H-合并" class="headerlink" title="H. 合并"></a>H. 合并</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase        <span class="token comment"># 把当前分支合并到某分支</span><span class="token function">git</span> rebase main   <span class="token comment"># 把当前分支合并到main分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="I-历史记录"><a href="#I-历史记录" class="headerlink" title="I. 历史记录"></a>I. 历史记录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token function">git</span> log <span class="token parameter variable">--oneline</span>    <span class="token comment"># 输出简要信息</span><span class="token function">git</span> log <span class="token parameter variable">-n</span>      <span class="token comment"># 输出最近的n条记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="J-回滚"><a href="#J-回滚" class="headerlink" title="J. 回滚"></a>J. 回滚</h3><h4 id="1）回退到某commit-all"><a href="#1）回退到某commit-all" class="headerlink" title="1）回退到某commit (all)"></a>1）回退到某commit (all)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> <span class="token punctuation">[</span>commit id<span class="token punctuation">]</span>     <span class="token comment"># 本地回退到某个记录</span><span class="token function">git</span> push origin main    <span class="token comment"># 远程回退到相同版本</span><span class="token comment"># 使用这种方式回滚</span><span class="token function">git</span> revert HEAD^        <span class="token comment"># 回退到上一个版本，以前的提交还存在，状态回退</span><span class="token function">git</span> push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2）一个文件回退到某个-commit"><a href="#2）一个文件回退到某个-commit" class="headerlink" title="2）一个文件回退到某个 commit"></a>2）一个文件回退到某个 commit</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 git log 查找要回退到的版本的id </span><span class="token function">git</span> checkout <span class="token punctuation">[</span>commit id<span class="token punctuation">]</span>  <span class="token punctuation">[</span>文件路径<span class="token punctuation">]</span>        <span class="token comment"># 会影响本地的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3）修改已经push的commit信息"><a href="#3）修改已经push的commit信息" class="headerlink" title="3）修改已经push的commit信息"></a>3）修改已经push的commit信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>  <span class="token comment"># 进入 vim 编辑器，修改提交信息</span><span class="token function">git</span> push <span class="token parameter variable">-f</span>    <span class="token comment"># 强制提交，这次提交纪录会覆盖上一次提交记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="K-隐藏与恢复"><a href="#K-隐藏与恢复" class="headerlink" title="K. 隐藏与恢复"></a>K. 隐藏与恢复</h3><p>使用场景：当前代码有修改，但是需要修改另外一处问题（1），同时不想当前的修改丢失。可以暂时隐藏当前代码的修改，解决完问题（1）之后，再恢复隐藏的修改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> stash        <span class="token comment"># 隐藏。保存未完成工作而不提交</span><span class="token function">git</span> stash pop           <span class="token comment"># 恢复之前隐藏的文件</span><span class="token function">git</span> stash list        <span class="token comment"># 列出多个隐藏处</span><span class="token function">git</span> stash drop        <span class="token comment"># 删除隐藏列表中最新的一个（也是最上面的一个），等价于git stash drop stash@{0}</span><span class="token function">git</span> stash drop stash@<span class="token punctuation">{</span>stashId<span class="token punctuation">}</span>    <span class="token comment"># 删除隐藏列表中的某一个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="L-删除远程仓库中的文件夹"><a href="#L-删除远程仓库中的文件夹" class="headerlink" title="L. 删除远程仓库中的文件夹"></a>L. 删除远程仓库中的文件夹</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dir</span>     <span class="token comment"># 查看当前目录下的文件夹</span><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> .idea    <span class="token comment"># 删除本地缓存区中的.idea文件夹</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"删除.idea文件夹"</span>   <span class="token comment"># 提交</span><span class="token function">git</span> push origin main    <span class="token comment"># 推送到远程仓库的main分支</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-出现的问题"><a href="#2-出现的问题" class="headerlink" title="2. 出现的问题"></a>2. 出现的问题</h2><h3 id="A-10054"><a href="#A-10054" class="headerlink" title="A. 10054"></a>A. 10054</h3><blockquote><p>fatal: unable to access ‘<a href="https://github.com/fmtlib/fmt.git/">https://github.com/fmtlib/fmt.git/</a>‘: OpenSSL SSL_read: Connection was reset, errno 10054</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解除ssl验证</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.sslVerify <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="B-443"><a href="#B-443" class="headerlink" title="B. 443"></a>B. 443</h3><blockquote><p>Failed to connect to github.com port 443 after 21106 ms: Timed out</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/10/25/hello-world/"/>
      <url>/2023/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
